name: "2. Create Release (merged-rules only, with Build Date)"

on:
  # 仅在 merged-rules/ 有变更时自动触发
  push:
    branches: [ main ]
    paths:
      - "merged-rules/**"
  # 支持手动运行
  workflow_dispatch:
    inputs:
      tag_date:
        description: "Build date (YYYY-MM-DD), default = Today (Asia/Shanghai)"
        required: false
        type: string
      force_replace:
        description: "If a release with same tag exists, delete it first?"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: write

concurrency:
  group: create-merged-release
  cancel-in-progress: true

env:
  TZ: Asia/Shanghai
  RETAIN_DAYS: "3"
  FORCE_REPLACE: ${{ inputs.force_replace || 'false' }}
  MANUAL_TAG_DATE: ${{ inputs.tag_date || '' }}

jobs:
  release-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Compute Build Date/Time (Asia/Shanghai)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${MANUAL_TAG_DATE}" ]; then
            TODAY="${MANUAL_TAG_DATE}"
          else
            TODAY="$(date +'%Y-%m-%d')"
          fi
          # Validate YYYY-MM-DD
          if ! [[ "$TODAY" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "Invalid tag_date format: $TODAY (expected YYYY-MM-DD)"
            exit 1
          fi
          BUILD_TIME="$(date +'%Y-%m-%d %H:%M:%S %Z')"
          echo "TODAY=$TODAY" >> "$GITHUB_ENV"
          echo "BUILD_TIME=$BUILD_TIME" >> "$GITHUB_ENV"

      - name: Prepare package (merged-rules only)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          rm -f merged-rules-*.zip || true

          if [ -d merged-rules ] && find merged-rules -type f -print -quit | grep -q . ; then
            echo "Packaging merged-rules/"
            zip -r "merged-rules-${TODAY}.zip" merged-rules >/dev/null
            echo "built_any=true" >> "$GITHUB_OUTPUT"
          else
            echo "No merged-rules dir or empty, skip packaging."
            echo "built_any=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop (no artifacts to release)
        if: steps.pkg.outputs.built_any == 'false'
        shell: bash
        run: |
          echo "Nothing to release for ${TODAY}. Job ends gracefully."

      - name: Replace existing release if needed
        if: steps.pkg.outputs.built_any == 'true' && env.FORCE_REPLACE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="rules-${TODAY}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists. Deleting (FORCE_REPLACE=true)."
            gh release delete "$TAG" --yes || true
            gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/tags/${TAG}" || true
          else
            echo "No existing release for $TAG."
          fi

      - name: Create Release and Upload (merged-rules only)
        if: steps.pkg.outputs.built_any == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: rules-${{ env.TODAY }}
          name: "Merged Rules Release - ${{ env.TODAY }}"
          body: |
            Build date (Asia/Shanghai): ${{ env.TODAY }}
            Build time: ${{ env.BUILD_TIME }}

            Included artifacts:
            - merged-rules (only)
          files: |
            merged-rules-${{ env.TODAY }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prune Releases Older Than ${{ env.RETAIN_DAYS }} Days (by createdAt)
        if: steps.pkg.outputs.built_any == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq -y
          fi

          cutoff_ts=$(date -d "${RETAIN_DAYS} days ago" +%s)
          gh release list --limit 200 --json tagName,createdAt \
          | jq -r '.[] | [.tagName, .createdAt] | @tsv' \
          | while IFS=$'\t' read -r tag created; do
              [ -z "$tag" ] && continue
              ts=$(date -d "$created" +%s || echo 0)
              if [ "$ts" -lt "$cutoff_ts" ]; then
                echo "Deleting old release: $tag ($created)"
                gh release delete "$tag" --yes || true
                gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/tags/${tag}" || true
              fi
            done
