name: 1. Daily Sync and Sanitize Rules (mihomo-core)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'  # 北京时间 05:00

permissions:
  contents: write

concurrency:
  group: sync-rules
  cancel-in-progress: true

jobs:
  sync-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Sync, Prune, and Sanitize Source Files
        run: |
          set -euo pipefail
          SOURCE_DIR="rulesets"
          TMP_DIR="${RUNNER_TEMP}/sync-tmp"
          mkdir -p "$TMP_DIR"

          if [ ! -f sources.urls ]; then
            echo "sources.urls not found, skip."
            exit 0
          fi

          get_owner_dir() {
            local url="$1"
            local host=$(echo "$url" | awk -F/ '{print $3}')
            if [ "$host" = "raw.githubusercontent.com" ]; then
              echo "$url" | awk -F/ '{print $4}'
            elif [ "$host" = "cdn.jsdelivr.net" ]; then
              # https://cdn.jsdelivr.net/gh/<owner>/<repo>@<ref>/...
              local p4=$(echo "$url" | awk -F/ '{print $4}')
              if [ "$p4" = "gh" ]; then
                echo "$url" | awk -F/ '{print $5}'
              else
                echo "$host"
              fi
            else
              echo "$host"
            fi
          }

          EXP="${TMP_DIR}/expected_files.list"
          ACT="${TMP_DIR}/actual_files.list"
          : > "$EXP"
          : > "$ACT"

          # 生成期望文件列表
          grep -v '^#' sources.urls | grep -v '^[[:space:]]*$' | while read -r url; do
            owner="$(get_owner_dir "$url")"
            fn="$(basename "$url")"
            echo "${SOURCE_DIR}/${owner}/${fn}" >> "$EXP"
          done

          # 实际文件列表
          if [ -d "$SOURCE_DIR" ]; then
            find "$SOURCE_DIR" -type f > "$ACT"
          fi

          sort -u "$ACT" -o "$ACT" || true
          sort -u "$EXP" -o "$EXP"

          # 删除已不在 sources.urls 中的“孤儿”文件
          comm -23 "$ACT" "$EXP" | while read -r f; do
            [ -n "$f" ] && echo "Prune: $f" && rm -f "$f" || true
          done

          # 拉取并净化
          grep -v '^#' sources.urls | grep -v '^[[:space:]]*$' | while read -r url; do
            owner="$(get_owner_dir "$url")"
            fn="$(basename "$url")"
            out="${SOURCE_DIR}/${owner}/${fn}"

            echo "Fetch -> ${out}"
            curl -fSL --create-dirs -o "${out}.download" "$url" || { echo "Warn: download fail $url"; rm -f "${out}.download"; continue; }

            # 净化：去 BOM、去 CRLF、去首行 payload:、去注释/空行、trim、规范逗号空格；保留裸域名和原规则行
            awk 'NR==1{ sub(/^\xEF\xBB\xBF/,"") } { print }' "${out}.download" \
            | sed 's/\r$//' \
            | sed '1{/^[[:space:]]*payload:[[:space:]]*$/d;}' \
            | grep -v -E '^[[:space:]]*#|^[[:space:]]*!' \
            | sed '/^[[:space:]]*$/d' \
            | sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//; s/[[:space:]]*,[[:space:]]*/,/g' \
            > "$out"

            rm -f "${out}.download"
          done

          # 清理空目录
          [ -d "$SOURCE_DIR" ] && find "$SOURCE_DIR" -type d -empty -delete || true

      - name: Commit Changes (only if any)
        run: |
          if [[ -z $(git status -s) ]]; then
            echo "No changes."
            exit 0
          fi
          git config user.name 'GitHub Actions Bot'
          git config user.email 'actions@github.com'
          git add -A
          git commit -m "chore(daily-sync): Update rule sets for $(date +'%Y-%m-%d')"
          git push
