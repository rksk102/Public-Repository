# .github/workflows/sync-rules.yml

name: Ultimate Auto-Sync Rules (with Pruning)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *' # 北京时间每日早晨 5 点

jobs:
  sync-rules-job:
    runs-on: ubuntu-latest
    steps:
      # 步骤一：签出仓库代码
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 步骤二：清理过时的规则文件
      - name: Prune Obsolete Rules
        run: |
          echo "Starting pruning process..."
          # 检查配置文件是否存在，如果不存在则跳过
          if [ ! -f sources.urls ]; then
            echo "sources.urls not found, skipping prune."
            exit 0
          fi

          # 1. 生成一份期望存在的文件列表
          touch expected_files.list
          grep -v '^#' sources.urls | grep -v '^$' | while read -r url; do
            project_name=$(echo "${url}" | awk -F/ '{print $4}')
            original_filename=$(basename "${url}")
            new_filename="${original_filename%.*}.list"
            target_path="rulesets/${project_name}/${new_filename}"
            echo "${target_path}" >> expected_files.list
          done
          
          # 2. 生成一份当前实际存在的文件列表
          #    -type f 表示只查找文件
          #    -name "*.list" 确保我们只处理规则文件
          touch actual_files.list
          if [ -d "rulesets" ]; then
            find rulesets -type f -name "*.list" > actual_files.list
          fi

          # 3. 对比两个列表，找出需要删除的文件
          #    comm -23 会找出只存在于第一个文件（actual）而不存在于第二个文件（expected）的行
          sort actual_files.list -o actual_files.list
          sort expected_files.list -o expected_files.list
          
          comm -23 actual_files.list expected_files.list | while read -r file_to_delete; do
            if [ -n "$file_to_delete" ]; then
              echo "Pruning obsolete file: ${file_to_delete}"
              rm "$file_to_delete"
            fi
          done

          # 4. 如果有空目录，也可以顺便清理（可选，但推荐）
          if [ -d "rulesets" ]; then
            find rulesets -type d -empty -delete
          fi

          echo "Pruning process finished."

      # 步骤三：拉取并更新规则文件
      - name: Fetch and Update Rules from URL List
        run: |
          echo "Starting fetch/update process..."
          if [ ! -f sources.urls ]; then
            echo "sources.urls not found, skipping fetch."
            exit 0
          fi

          grep -v '^#' sources.urls | grep -v '^$' | while read -r url; do
            project_name=$(echo "${url}" | awk -F/ '{print $4}')
            original_filename=$(basename "${url}")
            new_filename="${original_filename%.*}.list"
            target_path="rulesets/${project_name}/${new_filename}"
            
            echo "Syncing: ${target_path}"
            curl -sS -L --create-dirs -o "${target_path}" "${url}"
          done
          echo "Fetch/update process finished."

      # 步骤四：自动提交所有变更（包括新增、修改和删除）
      - name: Commit and Push Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(rules): Daily sync from URL list (incl. pruning)"
          branch: main
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
